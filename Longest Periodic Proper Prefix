#include <bits/stdc++.h>
using namespace std;

struct RollingHash {
    vector<unsigned long long> h, p;
    unsigned long long base = 131;
    RollingHash(const string &s) {
        int n = s.size();
        h.resize(n + 1, 0);
        p.resize(n + 1, 1);
        for (int i = 0; i < n; i++) {
            h[i + 1] = h[i] * base + (unsigned long long)(s[i]);
            p[i + 1] = p[i] * base;
        }
    }
    unsigned long long getHash(int l, int r) { // [l, r)
        return h[r] - h[l] * p[r - l];
    }
};

class Solution {
public:
    int getLongestPrefix(string s) {
        int n = s.size();
        RollingHash rh(s);
        int ans = -1;
        for (int len = n - 1; len >= 1; --len) {
            bool ok = true;
            int fullBlocks = n / len;
            int rem = n % len;

            // Compare each full block's hash with the first prefix
            auto firstHash = rh.getHash(0, len);
            for (int b = 1; b < fullBlocks; b++) {
                if (rh.getHash(b * len, (b + 1) * len) != firstHash) {
                    ok = false;
                    break;
                }
            }
            // Compare remaining part
            if (ok && rem > 0) {
                if (rh.getHash(fullBlocks * len, n) != rh.getHash(0, rem))
                    ok = false;
            }
            if (ok) {
                ans = len;
                break;
            }
        }
        return ans;
    }
};
