class Solution {
public:
    int getMaxArea(vector<int> &heights) {
        int n = heights.size();
        stack<int> st;

        vector<int> nsl(n), nsr(n);
        
        // Calculate NSL (Nearest Smaller to Left)
        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            nsl[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        // Clear the stack for NSR calculation
        while (!st.empty()) st.pop();

        // Calculate NSR (Nearest Smaller to Right)
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            nsr[i] = st.empty() ? n : st.top();
            st.push(i);
        }

        // Calculate Maximum Area
        long long int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int width = nsr[i] - nsl[i] - 1;
            long long int area = (long long)heights[i] * width;
            maxArea = max(maxArea, area);
        }
        return maxArea;
    }
};
